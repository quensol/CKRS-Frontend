WebSocket API 和后端接口说明文档

一、后端API接口

1. 创建分析任务
POST /api/v1/keyword/analyze?keyword={keyword}

请求参数:
- keyword: 要分析的关键词(URL编码)

返回示例:
{
    "seed_keyword": "新加坡",
    "id": 21,
    "status": "pending",  // 可能的状态: pending, processing, completed, failed
    "error_message": null,
    "total_search_volume": 0,
    "seed_search_volume": 0, 
    "seed_search_ratio": 0,
    "created_at": "2024-11-21T11:14:50"
}

2. 启动分析任务
POST /api/v1/keyword/start-analysis/{analysis_id}

请求参数:
- analysis_id: 分析任务ID

返回格式同上

3. 获取分析结果
GET /api/v1/keyword/analysis/{analysis_id}
GET /api/v1/keyword/competitors/{analysis_id}
GET /api/v1/keyword/cooccurrence/{analysis_id}
GET /api/v1/keyword/search-volume/{analysis_id}

4. 获取历史记录
GET /api/v1/keyword/history?skip=0&limit=10&keyword=关键词

二、WebSocket接口

1. 连接地址
ws://host:port/api/v1/keyword/ws/analysis/{analysis_id}

2. 消息类型

a) 心跳消息(服务器->客户端):
{
    "type": "heartbeat"
}

b) 进度消息(服务器->客户端):
{
    "type": "progress",
    "stage": "stage_name",  // 阶段名称
    "percent": 50,          // 进度百分比
    "message": "处理中...", // 状态消息
    "details": {           // 详细信息
        "key": "value"
    }
}

3. 进度阶段(stage)说明:

- initializing: 初始化
- analyzing_cooccurrence: 分析共现词
- calculating_volume: 计算搜索量
- analyzing_competitors: 分析竞争词
- completed: 完成
- error: 错误

4. 连接管理:
- 心跳间隔: 30秒
- 心跳超时: 35秒
- 最大重连次数: 5次
- 重连间隔: 3秒

三、前端使用示例

1. 基本流程:
a) 创建分析任务
b) 检查返回状态:
   - 如果是completed，直接显示结果
   - 如果是pending，建立WebSocket连接并启动分析
   - 如果是processing，建立WebSocket连接等待结果
c) 处理WebSocket消息更新界面

2. 代码示例:

// 创建分析任务
async function createAnalysis(keyword) {
    const response = await fetch(`/api/v1/keyword/analyze?keyword=${encodeURIComponent(keyword)}`, {
        method: 'POST'
    });
    return await response.json();
}

// 启动分析
async function startAnalysis(analysisId) {
    const response = await fetch(`/api/v1/keyword/start-analysis/${analysisId}`, {
        method: 'POST'
    });
    return await response.json();
}

// 建立WebSocket连接
function connectWebSocket(analysisId) {
    const ws = new WebSocket(`ws://localhost:8000/api/v1/keyword/ws/analysis/${analysisId}`);
    
    ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        if (data.type === 'heartbeat') {
            updateLastHeartbeat();
        } else if (data.type === 'progress') {
            updateProgress(data);
        }
    };
    
    return ws;
}

3. 错误处理:
- WebSocket连接失败时自动重连
- 心跳超时时重新连接
- 分析完成后自动关闭连接
- 连接意外断开时重连(未完成状态)

4. 注意事项:
- 确保正确处理WebSocket的生命周期
- 实现适当的重连机制
- 处理心跳消息保持连接活跃
- 在完成或出错时优雅关闭连接 